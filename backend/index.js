import express from 'express';
import cors from 'cors';
import mongoose from 'mongoose';
import multer from 'multer';
import { registerValidation, loginValidation } from './validations.js';
import { readLimiter } from './ratelimit.js';
import { handleValidationErrors, checkAuth}  from './utils/index.js';
import { UserController, ProductController, BasketController, FavoritesController } from './controllers/index.js';

import dotenv from 'dotenv';
dotenv.config();

const app = express();
// app.use(express.static(path.join(__dirname, 'build')));

// // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–∫—Ä–æ–º–µ API) –æ—Ç–¥–∞–µ–º index.html
// app.get('*', (req, res) => {
//   res.sendFile(path.resolve(__dirname, 'build', 'index.html'));
// });

app.use(express.json()); // –Ω–∞—É—á–∏–ª–∏ –ø–æ–Ω–∏–º–∞—Ç—å json —Ñ–∞–π–ª—ã
app.use(cors()); // –í–ê–ñ–ù–û –î–õ–Ø –ó–ê–ü–†–û–°–ê –ú–ï–ñ–î–£ –õ–û–ö–ê–õ–¨–ù–´–ú–ò –•–û–°–¢–ê–ú–ò –§–†–û–ù–¢–ê –ò –ë–ï–ö–ï–ù–î–ê

const PORT = process.env.PORT || 5555;
const storage = multer.diskStorage({
  // –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏–∂–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–π—á–∞—Å –∏—Ö
  // –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ-–∏—é cb
  destination: (_, file, cb) => {
    // –ø–æ–ª—É—á–∞–≤–µ—Ç –ø—É—Ç—å
    cb(null, 'uploads'); // –ù–ï –ø–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–π –≤ –ø–∞–ø–∫—É uploads
  },
  // –ø—Ä–µ–∂–¥–µ —á–µ–º –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–Ω —Å–∫–∞–∂–µ—Ç –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª
  // filename: (_, file, cb) => {
  //   cb(null, file.originalname); // –ù–ï –ø–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–π –≤ –ø–∞–ø–∫—É uploads
  // },
  filename: (_, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const extension = file.originalname.split('.').pop();
    cb(null, `${file.fieldname}-${uniqueSuffix}.${extension}`);
  }
});

const upload = multer({
  storage,
   fileFilter: (_, file, cb) => {
    const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg'];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true); // —Ñ–∞–π–ª –ø—Ä–∏–Ω—è—Ç
    } else {
      cb(new Error('Invalid file type. Only image files are allowed.'));

    }
  },
  limits: {
    fileSize: 5 * 1024 * 1024, // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: 5 –ú–ë
  }, 
});
app.use('/uploads', express.static('uploads')); // –µ—Å–ª–∏ —É–±—Ä–∞—Ç—å —Ç–æ –æ–Ω –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å —á—Ç–æ –ª–µ–∂–∏—Ç –≤ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏. 


// app.post('/uploads', checkAuth, upload.single('image'), (req, res) => {
app.post('/uploads', (req, res, next) => {
  upload.single('image')(req, res, (err) => {
    if (err instanceof multer.MulterError) {
      // –û—à–∏–±–∫–∞ Multer (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª)
      return res.status(400).json({ message: err.message });
    } else if (err) {
      // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞)
      return res.status(400).json({ message: err.message });
    }

    if (!req.file) {
      return res.status(400).json({ message: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.' });
    }

    res.json({
      url: `/uploads/${req.file.filename}`,
    });
  });
});

app.post('/auth/login', loginValidation, handleValidationErrors, UserController.login)
app.post('/auth/register', registerValidation, handleValidationErrors, UserController.register);

app.get('/auth/me', checkAuth, UserController.getMe);

app.get('/auth/users', checkAuth, readLimiter, UserController.getUsers);


app.get("/products/topproducts", readLimiter, ProductController.topProducts);
app.get("/products/sort", readLimiter, ProductController.sortProducts);


app.get('/products', readLimiter, ProductController.getAll);
app.get('/productspag', readLimiter, ProductController.getPagination);


app.get('/products/:id', readLimiter, ProductController.getOne);

app.patch('/products/:id/comments', checkAuth, handleValidationErrors, readLimiter, ProductController.addComment);
app.patch('/products/:productId/comments/:reviewId', checkAuth, ProductController.editComment);
app.delete('/products/:id/comments/:idComment', checkAuth, ProductController.removeComment);
// handleValidationErrors

app.patch('/products/:id/comments/:idComment/:action', checkAuth, ProductController.likeComment);

app.post('/basket/:id', checkAuth, readLimiter, handleValidationErrors, BasketController.addToBasket);
app.post('/basket/counter/:id/:action', checkAuth, handleValidationErrors, BasketController.counterBasket);
app.get('/basket', checkAuth, readLimiter, BasketController.getAllBasket);

app.post('/favorites/:id', checkAuth, readLimiter, handleValidationErrors, FavoritesController.addToFavorites);
app.get('/favorites', checkAuth, readLimiter, FavoritesController.getAllFavorites);

// app.listen(PORT, (err) => {
//   if(err) {return console.log(err, '------------------------')}
//   console.log(`!!Server OK!! -- https://localhost:${PORT}`)
// })

app.get('/', (req, res) => {
  res.send('üö¥‚Äç‚ôÇÔ∏è BikeApp API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`!!Server OK!! -- http://0.0.0.0:${PORT}`);
});

// mongoose
// .connect('mongodb://vkuhlmann:Vadik1990@cluster123-shard-00-00.dwucc.mongodb.net:27017,cluster123-shard-00-01.dwucc.mongodb.net:27017,cluster123-shard-00-02.dwucc.mongodb.net:27017/proj?ssl=true&replicaSet=atlas-gr7xm8-shard-0&authSource=admin&retryWrites=true&w=majority&appName=Cluster123')
// .then(() => console.log('db okkkkkk'))
// .catch((err) => console.log(`Error ${err}`))

// const uri = "mongodb://vkuhlmann:Vadik1990@cluster123-shard-00-00.dwucc.mongodb.net:27017,cluster123-shard-00-01.dwucc.mongodb.net:27017,cluster123-shard-00-02.dwucc.mongodb.net:27017/proj?ssl=true&replicaSet=atlas-gr7xm8-shard-0&authSource=admin&retryWrites=true&w=majority&appName=Cluster123";

mongoose
  .connect(process.env.MONGODB_URI)
  .then(() => console.log("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"))
  .catch(err => console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: –∫ –±–∞–∑–µ", err));
